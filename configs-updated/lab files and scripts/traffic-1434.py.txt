#!/usr/bin/env python

'''
A script to generate traffic mimicking a branch to other branches and data centers. Varying by hours of the day and days of the week.
'''

import subprocess
import sys
import random
import time
from datetime import datetime
sys.path.append("/pkg/bin/")
from ztp_helper import ZtpHelpers

sys.stdout = open('traffic.log', 'a')

op_time = str(datetime.now())
print(op_time + ' process start' + '\n')
sys.stdout.flush()

ztp_obj=ZtpHelpers()

# define variables
variance_max = 20 # maximum variation + / -

# data_centers = ['10.101.124.1', '10.101.125.1']
branch = '192.168.1.134'

# hours    = [03, 04, 05, 06, 07, 08,  09,  10,   11,   12,  01,   02,   03,   04,   05,  06,  07,  08,  09, 10, 11, 12, 01, 02]
traffic_wd = [10, 10, 10, 20, 10, 40, 200, 600,  400,  400, 600,  300,  200,  400,  600, 500, 400, 200, 80, 10, 10, 30, 10, 10]
traffic_we = [10, 10, 10, 30, 10, 80, 400, 900, 1300, 1300, 1000, 1000, 1300, 1500, 1600, 1200, 300,  10,  10, 10, 10, 50, 10, 10]

# frame size
size = 800
'''
dc0_size = 1200
dc1_size = 800
branch_size = 200
'''

# print(ztp_obj.xrcmd({"exec_cmd" : "ping 192.168.30.101"}))

# print(random.randint(( -1 * variance_max), variance_max))

while True:
	op_time = str(datetime.now())
	print(op_time + ' cycle start' + '\n')
	
	variance = 1.0 + random.randint( -1 * variance_max, variance_max) / 100.0

	weekday =  datetime.today().weekday() # where weekdays are 0-4, weekend 5-6
	hour = datetime.now().hour
	minute = datetime.now().minute

	if weekday < 5:	# < 7 if cheating as if all days are workdays, no weekends. For model training continuity.
		pings = int(traffic_wd[hour] * variance)
	elif weekday == 5:
		pings = int(traffic_we[hour] * variance * 1.3)
	else:
		pings = int(traffic_we[hour] * variance)
		
	cmd = ('ping de '.replace('de', branch)) + (' size fr '.replace('fr', str(size))) + (' count nn '.replace('nn', str(pings)))
	print(ztp_obj.xrcmd({"exec_cmd" : cmd}))
	sys.stdout.flush()

	'''
	cmd = ('ping de '.replace('de', data_centers[1])) + (' size fr '.replace('fr', str(dc1_size))) + (' count nn '.replace('nn', str(pings)))
	print(ztp_obj.xrcmd({"exec_cmd" : cmd}))
	sys.stdout.flush()

	for branch in branches:
		cmd = ('ping de '.replace('de', branch)) + (' size fr '.replace('fr', str(branch_size))) + (' count nn '.replace('nn', str(pings)))
		print(ztp_obj.xrcmd({"exec_cmd" : cmd}))
		sys.stdout.flush()
	'''

	time.sleep(random.randint(180, 300))
